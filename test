srcs/aymeri.c:	term->father = fork();
srcs/aymeri.c:	if (term->father == 0)
srcs/aymeri.c:	if (term->cmds[0][0] == '.' && term->cmds[0][1] == '/' && term->cmds[0][2])
srcs/aymeri.c:		(access(&term->cmds[0][2], X_OK) == 0) ? term->path =\
srcs/aymeri.c:		ft_strdup(&term->cmds[0][2]) : 0;
srcs/aymeri.c:	if (term->cmds[0][0] == '/')
srcs/aymeri.c:		(access(term->cmds[0], X_OK) == 0) ? term->path =\
srcs/aymeri.c:		ft_strdup(term->cmds[0]) : 0;
srcs/aymeri.c:		tabl[i] = ft_strjoin(tabl[i], term->cmds[0]);
srcs/aymeri.c:			term->path = ft_strdup(tabl[i]);
srcs/aymeri.c:	if (term->path)
srcs/aymeri.c:		term->exec = 1;
srcs/aymeri.c:		term->historylen++;
srcs/aymeri.c:	ft_strdup(term->cmds[0])));
srcs/aymeri.c:	term->exec = 0;
srcs/aymeri.c:	lst = term->lst;
srcs/aymeri.c:		term->env[i++] = ft_strdup(ft_strjoin(ft_strjoin(lst->var, "="),
srcs/aymeri.c:	lst = term->lst;
srcs/bonus.c:	while (term->cmds[++i])
srcs/bonus.c:		if (ft_strcmp(term->cmds[i], "-u") == 0)
srcs/bonus.c:			if (ft_strchr(term->cmds[i], '='))
srcs/bonus.c:				while (term->env[y])
srcs/bonus.c:				term->env[y] = ft_strdup(term->cmds[i]);
srcs/bonus.c:		(access(&cmd[2], X_OK) == 0) ? term->path =\
srcs/bonus.c:	if (term->path)
srcs/bonus.c:			if (term->i)
srcs/bonus.c:				execve(term->path, term->cmds, NULL);
srcs/bonus.c:				execve(term->path, term->cmds, term->env);
srcs/bonus.c:	lst = term->lst;
srcs/bonus.c:			term->path = ft_strdup(tabl[i]);
srcs/bonus.c:	lst = term->lst;
srcs/bonus.c:		while (term->cmds[++i])
srcs/bonus.c:			if (ft_strcmp(term->cmds[i], "-u") == 0)
srcs/bonus.c:				if (ft_strcmp(term->cmds[i + 1], lst->var) == 0)
srcs/bonus.c:		if (!term->cmds[i])
srcs/bonus.c:	while (term->cmds[++i])
srcs/bonus.c:		(ft_strcmp(term->cmds[i], "-u") == 0) ? i++ :\
srcs/bonus.c:		ft_putendl(term->cmds[i]);
srcs/bonus.c:	while (term->cmds[++i])
srcs/bonus.c:		if (ft_strchr(term->cmds[i], '='))
srcs/bonus.c:			ft_putendl(term->cmds[i]);
srcs/builtin.c:	lst = term->lst;
srcs/builtin.c:			term->lst = lst->next;
srcs/builtin.c:	lst = term->lst;
srcs/builtin.c:		term->lst = ft_add_lst(lst, term->lst);
srcs/builtin.c:	while (++i < (int)ft_strlen(&term->cmdactual[term->cursorpos]))
srcs/builtin.c:		if (((term->cursorpos + 7 + (int)ft_strlen(&term->cmdactual
srcs/builtin.c:		[term->cursorpos]) - i) % term->window->width) == 0)
srcs/builtin.c:			while (y++ < term->window->width)
srcs/cd.c:	chdir(term->cmds[1]);
srcs/cd.c:	if (term->cmds[1] && ft_strcmp(term->cmds[1], "-") == 0)
srcs/cd.c:		term->cmds[1] = ft_strdup(ft_get_env_by_name(term, "OLDPWD"));
srcs/cd.c:		ft_putendl_fd(term->cmds[1], 2);
srcs/cd.c:	if (term->cmds[1] && term->cmds[1][0] == '~' && term->cmds[1][1])
srcs/cd.c:		term->cmds[1] = ft_strjoin(ft_get_val(term, "HOME"), &term->cmds[1][1]);
srcs/cd.c:	if (!term->cmds[1] || (term->cmds[1] && term->cmds[1][0] == '~'))
srcs/cd.c:		if (access(term->cmds[1], R_OK))
srcs/cd.c:			return (ft_cd_error(term->cmds[1]));
srcs/cd.c:		if (lstat(term->cmds[1], &bufstat) == -1)
srcs/cd.c:			"cd: no such file or directory: ", term->cmds[1])));
srcs/cd.c:	if (ft_strcmp(term->cmds[0], "cd") == 0)
srcs/cd.c:	else if (ft_strcmp(term->cmds[0], "env") == 0)
srcs/cd.c:		(!term->cmds[1]) ? ft_display_env(term) : ft_env_options(term);
srcs/cd.c:	else if (ft_strcmp(term->cmds[0], "setenv") == 0)
srcs/cd.c:		ft_process_setenv(term, term->cmds[1], term->cmds[2]);
srcs/cd.c:	else if (ft_strcmp(term->cmds[0], "unsetenv") == 0)
srcs/cd.c:		ft_process_unsetenv(term, term->cmds[1]);
srcs/cd.c:	else if (ft_strcmp(term->cmds[0], "exit") == 0)
srcs/cd.c:		if (term->cmds[1])
srcs/cd.c:			exit(ft_atoi(term->cmds[1]));
srcs/cd.c:	term->i = 0;
srcs/cd.c:	term->u = NULL;
srcs/errors.c:	while (term->cmds[++i] && !ft_check_in_env(term, term->cmds[i]))
srcs/errors.c:		(ft_strcmp(term->cmds[i], "-i") == 0 ||\
srcs/errors.c:		ft_strcmp(term->cmds[i], "-") == 0) ? (term->i = 1) : 0;
srcs/errors.c:		if (ft_strcmp(term->cmds[i], "-u") == 0)
srcs/errors.c:			if (!term->cmds[++i])
srcs/errors.c:		else if (!ft_strchr(term->cmds[i], '=') &&\
srcs/errors.c:		ft_strcmp(term->cmds[i], "-i") != 0)
srcs/errors.c:			ft_putstr(ft_strjoin("jush: ", term->cmds[i]));
srcs/errors.c:	if (!term->cmds[i])
srcs/errors.c:		(!term->i) ? ft_newenv_display(term) : ft_display_i(term);
srcs/errors.c:	lst = term->lst;
srcs/errors.c:		if (!term->u || !ft_strstr(term->u, lst->var))
srcs/history.c:	tmp2 = term->history;
srcs/history.c:	if (!term->history)
srcs/history.c:		term->history = tmp;
srcs/history.c:	while (term->history->next)
srcs/history.c:		term->history = term->history->next;
srcs/history.c:	term->history->next = tmp;
srcs/history.c:	tmp->prev = term->history;
srcs/history.c:	term->history = term->history->next;
srcs/history.c:	term->inhistory = 0;
srcs/history.c:	if (!term->history || !term->history->prev)
srcs/history.c:	if (!term->history->next && term->cmdactual && !term->inhistory)
srcs/history.c:		ft_add_history(term, term->cmdactual);
srcs/history.c:		(term->history->prev) ? (term->history = term->history->prev) : 0;
srcs/history.c:	if (term->history->prev && term->inhistory)
srcs/history.c:		term->history = term->history->prev;
srcs/history.c:	term->inhistory = 1;
srcs/history.c:	term->cursorpos = ft_strlen(term->history->var);
srcs/history.c:	term->cmdlength = ft_strlen(term->history->var);
srcs/history.c:	term->cmdactual = ft_strdup(term->history->var);
srcs/history.c:	ft_putstr(term->history->var);
srcs/history.c:	if (!term->history)
srcs/history.c:	if (term->history->next)
srcs/history.c:		term->history = term->history->next;
srcs/history.c:		term->cursorpos = ft_strlen(term->history->var);
srcs/history.c:		term->cmdlength = ft_strlen(term->history->var);
srcs/history.c:		term->cmdactual = ft_strdup(term->history->var);
srcs/history.c:		ft_putstr(term->history->var);
srcs/history.c:		term->inhistory = 0;
srcs/history.c:	term->history = NULL;
srcs/history.c:	term->historylen = 0;
srcs/history.c:	term->historycurrent = 0;
srcs/history.c:		term->historylen++;
srcs/history.c:		if (!term->history)
srcs/history.c:			term->history = tmp;
srcs/history.c:			term->history->next = tmp;
srcs/history.c:			tmp->prev = term->history;
srcs/history.c:			term->history = term->history->next;
srcs/init.c:	if (!term->window)
srcs/init.c:		term->window = (t_window*)malloc(sizeof(t_window));
srcs/init.c:	term->window->width = w.ws_col;
srcs/init.c:	term->window->heigth = w.ws_row;
srcs/init.c:	term->separators = "";
srcs/init.c:	term->cursorpos = 0;
srcs/init.c:	term->cmdlength = 0;
srcs/init.c:	term->path = NULL;
srcs/init.c:	term->cmdactual = NULL;
srcs/init.c:	ft_bzero(term->cmdactual, ft_strlen(term->cmdactual));
srcs/init.c:	ft_bzero(term->buf, ft_strlen(term->buf));
srcs/init.c:	if (term->inheredoc)
srcs/init.c:	if (term->exec)
srcs/last.c:		term->fail = 1;
srcs/last.c:	term->test = 1;
srcs/last.c:	while (ft_strcmp(term->cmds[i + 1], \
srcs/last.c:	ft_strsplit(term->env[y], '=')[0]) != 0)
srcs/last.c:	while (term->env[++y])
srcs/last.c:		term->env[y - 1] = ft_strdup(term->env[y]);
srcs/last.c:		(ft_strcmp(term->env[y - 1], term->env[y]) == 0) ?\
srcs/last.c:		(term->env[y] = NULL) : 0;
srcs/last2.c:	(term->i) ? ft_env_i(term) : 0;
srcs/last2.c:	while (term->cmds[++y])
srcs/last2.c:		(ft_strcmp(term->cmds[y], term->path) == 0) ?\
srcs/last2.c:		term->cmds = &term->cmds[y] : 0;
srcs/last2.c:	(!term->cmds[1]) ? (tmp = term->cmds[0]) : 0;
srcs/last2.c:	while (term->cmds[++y])
srcs/last2.c:		(!tmp) ? (tmp = ft_strdup(term->cmds[y - 1])) : 0;
srcs/last2.c:		tmp = ft_strjoin(ft_strjoin(tmp, " "), term->cmds[y]);
srcs/last2.c:	execve(term->path, term->cmds, term->env);
srcs/last2.c:	term->path = NULL;
srcs/last2.c:	if (!term->cmdactual)
srcs/last2.c:		term->inheredoc = 0;
srcs/last2.c:		term->cmdactual = "EOF";
srcs/last2.c:		ft_putendl_fd(term->cmdactual, term->heredocfd);
srcs/last2.c:	while (++i < term->window->width && term->cursorpos < term->cmdlength)
srcs/main.c:	term->parselst = term->parselst->next;
srcs/main.c:	while (term->parselst)
srcs/main.c:		(term->parselst->close1) ? close(1) : 0;
srcs/main.c:		(term->parselst->close2) ? close(2) : 0;
srcs/main.c:		term->cmds = ft_strsplit(term->parselst->cmd, ' ');
srcs/main.c:			if (term->parselst->file)
srcs/main.c:				term->parselst->file = NULL;
srcs/main.c:			if (!term->parselst->next && !term->parselst->sgred &&
srcs/main.c:			!term->parselst->dbred)
srcs/main.c:				execve(term->path, term->cmds, term->env);
srcs/main.c:		term->parselst = term->parselst->next;
srcs/main.c:	term->cmds = NULL;
srcs/main.c:	term->fail = 0;
srcs/main.c:	term->parselst = NULL;
srcs/main.c:	if (term->fail)
srcs/main.c:	term->cmds = ft_strsplit(term->parselst->cmd, ' ');
srcs/main.c:	if (term->parselst->heredoc)
srcs/main.c:	if (ft_check_builtin(term) && !term->parselst->next)
srcs/main.c:	while (term->separators)
srcs/main.c:		while ((read(0, term->buf, BUFFSIZE)) && term->buf[0] != 10)
srcs/main.c:		term->separators = NULL;
srcs/main.c:		if (term->separators)
srcs/main.c:			term->cmdactual = ft_strjoin(term->cmdactual, "\n");
srcs/main.c:			term->cmdlength++;
srcs/main.c:		if (term->test)
srcs/main.c:			term->test = 0;
srcs/main.c:		(ft_strlen(term->cmdactual) > 0) ?
srcs/main.c:		ft_add_history(term, term->cmdactual) : 0;
srcs/main.c:		term->cmdsplit = ft_strsplit(term->cmdactual, ';');
srcs/main.c:		while (term->cmdsplit && term->cmdsplit[++argc])
srcs/main.c:			ft_process_exec(term, term->cmdsplit[argc]);
srcs/parse.c:		term->minus = 1;
srcs/parse.c:		term->minus = 1;
srcs/parse.c:		term->minus = 0;
srcs/parse.c:		if (term->fail)
srcs/parse.c:		if (term->minus)
srcs/parse.c:	if (!term->parselst)
srcs/parse.c:		term->parselst = tmp;
srcs/parse.c:		tmp2 = term->parselst;
srcs/parse2.c:		term->fail = 1;
srcs/parse2.c:	if (end == i && (term->fail = 1))
srcs/parse2.c:		term->fail = 1;
srcs/parse2.c:	if (end == i && (term->fail = 1))
srcs/parse2.c:		term->fail = 1;
srcs/parse3.c:	term->cmdlength = 0;
srcs/parse3.c:	tmp = term->parselst;
srcs/parse3.c:	tabl = ft_strsplit(term->parselst->cmd, ' ');
srcs/parse3.c:		fd = open(term->parselst->file, O_RDONLY);
srcs/parse3.c:	if (term->parselst->sgred || term->parselst->dbred)
srcs/parse3.c:		ft_write_in_tmp(term, term->parselst->cmd);
srcs/parse3.c:		ft_copy_redirections(term, term->parselst);
srcs/parse3.c:		if (!term->parselst->next)
srcs/parse3.c:		if (!term->parselst->file)
srcs/redirections.c:	term->cmds = ft_strsplit(cmd, ' ');
srcs/redirections.c:			dup2(term->parselst->fd, STDOUT_FILENO);
srcs/redirections.c:			execve(term->path, term->cmds, term->env);
srcs/redirections.c:		close(term->parselst->fd);
srcs/redirections.c:	term->cmdlength = ft_strlen(term->cmdactual) - 12;
srcs/redirections.c:		while ((read(0, term->buf, BUFFSIZE)) && term->buf[0] != 10)
srcs/redirections.c:			if (!term->inheredoc)
srcs/redirections.c:		if (ft_strequ(term->cmdactual, str))
srcs/redirections.c:		ft_putendl_fd(term->cmdactual, fd);
srcs/redirections.c:	tabl = ft_strsplit(term->parselst->heredoc, ';');
srcs/redirections.c:	term->inheredoc = 1;
srcs/redirections.c:		term->heredocfd = open(ft_strjoin(ft_strjoin(ft_get_env_by_name(term,
srcs/redirections.c:		ft_create_heredoc2(term, tabl[i], term->heredocfd, i);
srcs/redirections.c:	close(term->heredocfd);
srcs/redirections.c:	if (!term->parselst->file)
srcs/redirections.c:		term->parselst->file = ft_strjoin(ft_strjoin(ft_get_env_by_name(term,
srcs/redirections.c:	term->inheredoc = 0;
srcs/rest.c:	while (term->env[++y])
srcs/rest.c:		term->env[y] = NULL;
srcs/rest.c:	while (term->cmds[++i])
srcs/rest.c:		if (ft_strchr(term->cmds[i], '='))
srcs/rest.c:			while (term->env[y])
srcs/rest.c:			term->env[y] = ft_strdup(term->cmds[i]);
srcs/rest.c:	if (term->cursorpos < term->cmdlength)
srcs/rest.c:		tmp = ft_strjoin(str, (term->cmdactual + term->cursorpos));
srcs/rest.c:		term->cmdactual[term->cursorpos] = '\0';
srcs/rest.c:		term->cmdactual = ft_strjoin(term->cmdactual, tmp);
srcs/rest.c:		term->cmdlength = ft_strlen(term->cmdactual);
srcs/rest.c:	else if (!term->cmdactual)
srcs/rest.c:		term->cmdactual = ft_strdup(str);
srcs/rest.c:		term->cmdactual = ft_strjoin(term->cmdactual, str);
srcs/rest.c:	term->cursorpos += ft_strlen(str);
srcs/rest.c:	term->cmdlength = ft_strlen(term->cmdactual);
srcs/rest.c:	if (term->inhistory)
srcs/rest.c:		term->history->var = term->cmdactual;
srcs/rest.c:		name = "xterm-256color";
srcs/rest.c:	while (term->cmdlength-- > 0)
srcs/rest.c:	term->cmdactual = NULL;
srcs/separators.c:	while (term->cmdactual && term->cmdactual[++i])
srcs/separators.c:		if (term->cmdactual[i] == c)
srcs/separators.c:			term->cmdactual[i] = ' ';
srcs/separators.c:	tmp = &term->separators[i + 1];
srcs/separators.c:	term->separators[i] = '\0';
srcs/separators.c:	if (term->separators[0] == '\0')
srcs/separators.c:		term->separators = ft_strdup(tmp);
srcs/separators.c:		term->separators = ft_strjoin(term->separators, tmp);
srcs/separators.c:	while (term->separators && term->separators[++i])
srcs/separators.c:		if (term->separators[i] == c)
srcs/separators.c:			if (!term->separators[i + 1])
srcs/separators.c:					term->separators = NULL;
srcs/separators.c:					term->separators[i] = '\0';
srcs/separators.c:				term->separators = NULL;
srcs/separators.c:	(!term->separators) ? (term->separators = ft_strdup(str)) :
srcs/separators.c:	(term->separators = ft_strjoin(term->separators, str));
srcs/separators.c:	while (term->cmdactual && term->cmdactual[++i])
srcs/separators.c:		if (ft_is_separator(term->cmdactual[i]))
srcs/separators.c:			ft_add_separator(term, term->cmdactual[i]);
srcs/separators2.c:	while (term->separators && term->separators[++i])
srcs/separators2.c:		if (term->separators[i] == c)
srcs/separators2.c:	i = ft_strlen(term->cmdactual);
srcs/separators2.c:	while (term->cmdactual && term->cmdactual[--i])
srcs/separators2.c:		if (term->cmdactual[i] == c)
srcs/separators2.c:			term->cmdactual[i] = ' ';
srcs/separators3.c:	tmp = &term->separators[i + 1];
srcs/separators3.c:	term->separators[i] = '\0';
srcs/separators3.c:	if (term->separators[0] == '\0')
srcs/separators3.c:		term->separators = ft_strdup(tmp);
srcs/separators3.c:			term->separators = ft_strjoin(term->separators, tmp);
srcs/separators3.c:	i = ft_strlen(term->separators);
srcs/separators3.c:	while (term->separators && term->separators[--i])
srcs/separators3.c:		if (term->separators[i] == c)
srcs/separators3.c:			if (!term->separators[i + 1])
srcs/separators3.c:					term->separators = NULL;
srcs/separators3.c:					term->separators[i] = '\0';
srcs/separators3.c:				term->separators = &term->separators[1];
srcs/set_env.c:	lst = term->lst;
srcs/set_env.c:	term->buf = (char*)malloc(sizeof(char) * BUFFSIZE);
srcs/set_env.c:	term->heredocfd = 0;
srcs/set_env.c:	term->test = 0;
srcs/set_env.c:	term->u = NULL;
srcs/set_env.c:	term->exec = 1;
srcs/set_env.c:	term->cursorpos = 0;
srcs/set_env.c:	term->cmdlength = 0;
srcs/set_env.c:	term->copy = NULL;
srcs/set_env.c:	term->historylen = 0;
srcs/set_env.c:	term->inhistory = 0;
srcs/set_env.c:	term->historycurrent = 0;
srcs/set_env.c:	term->i = 0;
srcs/set_env.c:	term->parenthese = 0;
srcs/set_env.c:	term->parselst = NULL;
srcs/set_env.c:	term->env = env;
srcs/set_env.c:	term->lst = lst;
srcs/set_env.c:	lst = term->lst;
srcs/termcaps.c:	while (++i < term->window->width && term->cursorpos > 0)
srcs/termcaps.c:		if (((term->cursorpos + 7) % term->window->width) == 0)
srcs/termcaps.c:			while (y++ < term->window->width)
srcs/termcaps.c:		term->cursorpos--;
srcs/termcaps.c:	if (term->buf[0] == 4 && ft_strlen(term->cmdactual) == 0)
srcs/termcaps.c:	else if (term->buf[0] == 4 && term->cursorpos < term->cmdlength)
srcs/termcaps.c:	else if (ft_is_printable(term->buf))
srcs/termcaps.c:		ft_print_buf(term, term->buf);
srcs/termcaps.c:		if (!term->copy)
srcs/termcaps.c:		ft_print_buf(term, term->copy);
srcs/termcaps.c:		while (i++ < (int)ft_strlen(term->copy))
srcs/termcaps.c:	else if (term->buf[0] == 4 && term->inheredoc)
srcs/termcaps.c:	else if (term->buf[0] == 127)
srcs/termcaps.c:		(term->cursorpos > 0) ? ft_backspace(term) : 0;
srcs/termcaps.c:	else if (term->buf[0] == 9)
srcs/termcaps.c:		(term->cmdlength > 0) ? (term->copy = ft_strdup(term->cmdactual)) : 0;
srcs/termcaps.c:		(term->cursorpos < term->cmdlength) ? (term->copy = \
srcs/termcaps.c:		ft_strdup(&term->cmdactual[term->cursorpos])) : 0;
srcs/termcaps.c:	else if (term->buf[0] == 127)
srcs/termcaps.c:		(term->cursorpos > 0) ? ft_backspace(term) : 0;
srcs/termcaps.c:	ft_bzero(term->buf, ft_strlen(term->buf));
srcs/termcaps2.c:	i = term->cursorpos;
srcs/termcaps2.c:	i = term->cursorpos;
srcs/termcaps2.c:	if (term->cursorpos < term->cmdlength)
srcs/termcaps2.c:		while (i++ < term->cmdlength)
srcs/termcaps2.c:	tmp = &term->cmdactual[term->cursorpos];
srcs/termcaps2.c:	term->cmdlength--;
srcs/termcaps2.c:	term->cmdactual[term->cursorpos] = '\0';
srcs/termcaps2.c:	term->cmdactual = ft_strjoin(term->cmdactual, tmp);
srcs/termcaps2.c:	ft_putstr(&term->cmdactual[term->cursorpos]);
srcs/termcaps2.c:	if (term->cursorpos == 0)
srcs/termcaps2.c:	if (((term->cursorpos + 7) % term->window->width) == 0)
srcs/termcaps2.c:		while (++i < term->window->width)
srcs/termcaps2.c:	term->cursorpos--;
srcs/termcaps2.c:	if (term->cursorpos == term->cmdlength)
srcs/termcaps2.c:	term->cursorpos++;
srcs/termcaps2.c:	if (((term->cursorpos + 7) % term->window->width) == 0)
srcs/termcaps3.c:	if (term->cursorpos == 0)
srcs/termcaps3.c:	term->copy = ft_strdup(term->cmdactual);
srcs/termcaps3.c:	term->copy[term->cursorpos] = '\0';
srcs/termcaps3.c:	term->cursorpos--;
srcs/termcaps3.c:	if (((term->cursorpos + 7) % term->window->width) == 0)
srcs/termcaps3.c:		while (y++ < term->window->width)
srcs/termcaps3.c:	term->cursorpos++;
srcs/termcaps3.c:	if (((term->cursorpos + 7) % term->window->width) == 0)
srcs/termcaps3.c:	while (term->cursorpos > 0 && term->cmdactual[term->cursorpos - 1] == ' ')
srcs/termcaps3.c:	while (term->cursorpos > 0)
srcs/termcaps3.c:		if (term->cursorpos > 0 && term->cmdactual[term->cursorpos - 1] == ' ')
srcs/termcaps3.c:	while (term->cursorpos < term->cmdlength &&
srcs/termcaps3.c:	(term->cmdactual[term->cursorpos] == ' ' || bol == 0))
srcs/termcaps3.c:		if (term->cmdactual[term->cursorpos] == ' ')
srcs/termcaps4.c:	if (term->buf[0] == 27 && term->buf[1] == 91 && term->buf[2] == 49
srcs/termcaps4.c:	&& term->buf[3] == 59 && term->buf[4] == 50 && term->buf[5] == 68)
srcs/termcaps4.c:	if (term->buf[0] == 27 && term->buf[1] == 91 && term->buf[2] == 49
srcs/termcaps4.c:	&& term->buf[3] == 59 && term->buf[4] == 50 && term->buf[5] == 67)
srcs/termcaps4.c:	if (term->buf[0] == 27 && term->buf[1] == 91 && term->buf[2] == 49
srcs/termcaps4.c:	&& term->buf[3] == 59 && term->buf[4] == 50 && term->buf[5] == 66)
srcs/termcaps4.c:	if (term->buf[0] == 27 && term->buf[1] == 91 && term->buf[2] == 49
srcs/termcaps4.c:	&& term->buf[3] == 59 && term->buf[4] == 50 && term->buf[5] == 65)
srcs/termcaps4.c:	i = term->cursorpos - 1;
srcs/termcaps4.c:	if (term->cursorpos < term->cmdlength)
srcs/termcaps4.c:		while (term->cmdactual[++i])
srcs/termcaps4.c:			ft_putchar(term->cmdactual[i]);
srcs/termcaps4.c:		if (((i + 7) % term->window->width) == 0)
srcs/termcaps4.c:		if (((term->cursorpos + 7) % term->window->width) == 0)
srcs/termcaps5.c:	if (term->buf[0] == 27 && term->buf[1] == 91 && term->buf[2] == 49
srcs/termcaps5.c:	&& term->buf[3] == 59 && term->buf[4] == 50 && term->buf[5] == 70)
srcs/termcaps5.c:	if (term->buf[0] == 27 && term->buf[1] == 91 && term->buf[2] == 72
srcs/termcaps5.c:	&& term->buf[3] == 0 && term->buf[4] == 0 && term->buf[5] == 0)
srcs/termcaps5.c:	if (term->buf[0] == 27 && term->buf[1] == 91 && term->buf[2] == 70
srcs/termcaps5.c:	&& term->buf[3] == 0 && term->buf[4] == 0 && term->buf[5] == 0)
srcs/termcaps5.c:	if (term->buf[0] == 27 && term->buf[1] == 91 && term->buf[2] == 68
srcs/termcaps5.c:	&& term->buf[3] == 0 && term->buf[4] == 0 && term->buf[5] == 0)
srcs/termcaps5.c:	if (term->buf[0] == 27 && term->buf[1] == 91 && term->buf[2] == 67
srcs/termcaps5.c:	&& term->buf[3] == 0 && term->buf[4] == 0 && term->buf[5] == 0)
srcs/termcaps6.c:	if (term->buf[0] == 27 && term->buf[1] == 91 && term->buf[2] == 49
srcs/termcaps6.c:	&& term->buf[3] == 59 && term->buf[4] == 50 && term->buf[5] == 72)
srcs/termcaps6.c:	if (term->buf[0] == 27 && term->buf[1] == 91 && term->buf[2] == 65
srcs/termcaps6.c:	&& term->buf[3] == 0 && term->buf[4] == 0 && term->buf[5] == 0)
srcs/termcaps6.c:	if (term->buf[0] == 27 && term->buf[1] == 91 && term->buf[2] == 66
srcs/termcaps6.c:	&& term->buf[3] == 0 && term->buf[4] == 0 && term->buf[5] == 0)
srcs/termcaps6.c:	if (term->buf[0] == 27 && term->buf[1] == 91 && term->buf[2] == 53
srcs/termcaps6.c:	&& term->buf[3] == 126 && term->buf[4] == 0 && term->buf[5] == 0)
srcs/termcaps6.c:	if (term->buf[0] == 27 && term->buf[1] == 91 && term->buf[2] == 54
srcs/termcaps6.c:	&& term->buf[3] == 126 && term->buf[4] == 0 && term->buf[5] == 0)
